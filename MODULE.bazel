module(name = "playground")

# Bazel rules begin

# Note: This needs to be before rules_cc in order to correctly configure the C++ toolchain.
bazel_dep(name = "apple_support", version = "1.23.1")
bazel_dep(name = "rules_cc", version = "0.2.1")

bazel_dep(name = "aspect_bazel_lib", version = "2.21.1")
bazel_dep(name = "bazel_skylib", version = "1.8.1")
bazel_dep(name = "bazelrc-preset.bzl", version = "1.1.0")
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "rules_build_error", version = "0.8.6")
bazel_dep(name = "rules_foreign_cc", version = "0.15.0")
bazel_dep(name = "rules_license", version = "1.0.0")

# Bazel rules end

# Apple rules begin

bazel_dep(name = "rules_apple", version = "4.1.2")

# Fix for running tests on iOS devices with Xcode 16.3+
git_override(
    module_name = "rules_apple",
    commit = "aebd39d3e363a9998229a8d0a01d2f1380fad27a",
    remote = "https://github.com/microblink/rules_apple.git",
)

bazel_dep(name = "rules_swift", version = "3.1.1")
bazel_dep(name = "rules_xcodeproj", version = "3.1.2")

# Apple rules end

# Android rules begin
bazel_dep(name = "rules_android_ndk", version = "0.1.3")
git_override(
    module_name = "rules_android_ndk",
    commit = "54698284cca8091f861213569a4d35f144e9d3ec",
    remote = "https://github.com/microblink/rules_android_ndk.git",
)

android_ndk_repository_extension = use_extension("@rules_android_ndk//:extension.bzl", "android_ndk_repository_extension")
android_ndk_repository_extension.configure(
    api_level = 21,
    version = "r28c",
)
use_repo(android_ndk_repository_extension, "androidndk")

# Don't register the Android toolchain here, as it will trigger NDK download even when not needed (e.g. on Linux arm64)
# Instead, register it with --extra_toolchains=@androidndk//:all from commandline
# register_toolchains("@androidndk//:all")

bazel_dep(name = "rules_android", version = "0.6.6")

remote_android_extensions = use_extension("@rules_android//bzlmod_extensions:android_extensions.bzl", "remote_android_tools_extensions")
use_repo(remote_android_extensions, "android_tools")

android_sdk_repository_extension = use_extension("@rules_android//rules/android_sdk_repository:rule.bzl", "android_sdk_repository_extension")
use_repo(android_sdk_repository_extension, "androidsdk")

bazel_dep(name = "rules_jvm_external", version = "6.8")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    name = "android_test_deps",
    artifacts = [
        "junit:junit:4.13.2",
        "androidx.test:rules:1.6.1",
        "androidx.test.ext:junit:1.2.1",
    ],
    repositories = [
        "https://maven.google.com",
        "https://repo1.maven.org/maven2",
    ],
)
use_repo(maven, "android_test_deps")

# Android rules end

# Emscripten rules begin
bazel_dep(name = "emsdk")
git_override(
    module_name = "emsdk",
    commit = "833fa33421e0a1873c43328bb937dbed53597b17",
    remote = "https://github.com/emscripten-core/emsdk.git",
    strip_prefix = "bazel",
)

emscripten_deps = use_extension("@emsdk//:emscripten_deps.bzl", "emscripten_deps")
emscripten_deps.config(
    version = "4.0.13",
)

emscripten_cache = use_extension(
    "@emsdk//:emscripten_cache.bzl",
    "emscripten_cache",
)
emscripten_cache.configuration(flags = ["--lto=thin"])
emscripten_cache.targets(targets = [
    "crtbegin",
    "libal",
    "libc-mt",
    "libc-mt-debug",
    "libc",
    "libc++-mt-noexcept",
    "libc++-noexcept",
    "libc++-debug-mt-noexcept",
    "libc++-debug-noexcept",
    "libc++abi-noexcept",
    "libc++abi-mt-noexcept",
    "libc++abi-debug-mt-noexcept",
    "libc++abi-debug-noexcept",
    "libcompiler_rt-mt",
    "libcompiler_rt",
    "libembind-rtti",
    "libemmalloc-mt",
    "libemmalloc-mt-debug",
    "libemmalloc",
    "libemmalloc-debug",
    "libfetch-mt",
    "libfetch",
    "libGL-getprocaddr",
    "libGL-mt-getprocaddr",
    "libhtml5",
    "libnoexit",
    "libsockets-mt",
    "libsockets",
    "libprintf_long_double-mt",
    "libprintf_long_double-mt-debug",
    "libprintf_long_double",
    "libprintf_long_double-debug",
    "libstubs",
    "libstubs-debug",
    "libc-debug",
    "libdlmalloc",
    "libc++abi-debug-noexcept",
])

bazel_dep(name = "posluznik", version = "1.3.5")
git_override(
    module_name = "posluznik",
    commit = "41af6ef76a60d6adb8e8dd0066f2ac8386badc56",
    remote = "https://github.com/microblink/posluznik",
)


# Emscripten rules end

# Copybara rules begin
bazel_dep(name = "rules_java", version = "8.13.0")

copybara_version = "v20250818"

http_jar = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_jar")

http_jar(
    name = "com_github_google_copybara",
    # Fill in from https://github.com/google/copybara/releases/download/[version]/copybara_deploy.jar.sha256
    sha256 = "81e0730ec88455ecb13623aa49f33b456edbcd9e6f572250e80ca2884ac2ebfa",
    urls = ["https://github.com/google/copybara/releases/download/{}/copybara_deploy.jar".format(copybara_version)],
)

# Copybara rules end


# DEV DEPENDENCIES

git_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")


# Override with custom build file to correctly built gtest for emscripten without pthreads
git_repository(
    name = "googletest",
    build_file = "//3rdparty:googletest.BUILD",
    commit = "52eb8108c5bdec04579160ae17225d66034bd723",
    remote = "https://github.com/google/googletest.git",
)

